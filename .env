# This is the polling version of the code (suitable for local running).
# For online deployment, see the webhook version below.

import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackContext
import openai

# Set up logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# Replace with your Telegram Bot Token and OpenAI API Key
TELEGRAM_TOKEN = ("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = ("OPENAI_API_KEY")

openai.api_key = OPENAI_API_KEY

async def start(update: Update, context: CallbackContext) -> None:
    """Handler for /start command."""
    await update.message.reply_text('Hello! I am a bot integrated with GPT. Send me a message, and I will respond using AI.')

async def handle_message(update: Update, context: CallbackContext) -> None:
    """Handler for text messages."""
    user_message = update.message.text
    try:
        # Call OpenAI's ChatGPT API
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo",  # Or use "gpt-4" if you have access
            messages=[
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user", "content": user_message}
            ]
        )
        ai_response = response.choices[0].message.content
        await update.message.reply_text(ai_response)
    except Exception as e:
        logging.error(f"Error: {e}")
        await update.message.reply_text('Sorry, something went wrong. Please try again.')

def main() -> None:
    """Main function to run the bot."""
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # Run the bot with polling
    application.run_polling()

if name == 'main':
    main()